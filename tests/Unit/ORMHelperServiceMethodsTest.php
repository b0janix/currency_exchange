<?php

namespace App\Tests\Unit;

use App\Entity\Currency;
use App\Entity\ExchangeRateMetadata;
use App\Repository\CurrencyRepository;
use App\Service\ORMHelperService;
use DateTimeImmutable;
use Doctrine\ORM\EntityManager;
use Exception;
use PHPUnit\Framework\TestCase;

class ORMHelperServiceMethodsTest extends TestCase
{
    private ORMHelperService $ormHelper;

    private array $data;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $curRepoMock = $this->createMock(CurrencyRepository::class);
        $entityManagerMock = $this->createMock(EntityManager::class);
        $this->ormHelper = new ORMHelperService($curRepoMock, $entityManagerMock);
        $this->data = json_decode(file_get_contents('tests/Files/api_response.json'), true);
    }

    public function testHandleDBSave()
    {
        $expectedData = [
            "time_last_update_unix" => 1704931201,
            "time_last_update_utc" => "Thu, 11 Jan 2024 00:00:01 +0000",
            "time_next_update_unix" => 1705017601,
            "time_next_update_utc" => "Fri, 12 Jan 2024 00:00:01 +0000",
            "base_code" => "EUR",
            "conversion_rates" => [
                "EUR" => 1,
                "USD" => 1.0958,
                "GBP" => 0.8609
            ]
        ];

        $filteredData = $this->ormHelper->handleDBSave($this->data, 'EUR', ['USD', 'GBP']);

        $this->assertEquals($expectedData, $filteredData);
    }

    /**
     * @throws Exception
     */
    public function testGenerateExchangeRateMetadata()
    {
        $metadata = $this->ormHelper->generateExchangeRateMetadata($this->data, 'EUR');

        $this->assertEquals(1704931201, $metadata->getTimeLastUpdateUnix());
        $this->assertEquals(new DateTimeImmutable("Thu, 11 Jan 2024 00:00:01 +0000"), $metadata->getTimeLastUpdateUtc());
        $this->assertEquals(1705017601, $metadata->getTimeNextUpdateUnix());
        $this->assertEquals(new DateTimeImmutable("Fri, 12 Jan 2024 00:00:01 +0000"), $metadata->getTimeNextUpdateUtc());
        $this->assertEquals("EUR", $metadata->getBaseCurrencyCode());
    }

    public function testGenerateExchangeRate()
    {
        $currency = new Currency();
        $metadata = new ExchangeRateMetadata();

        $exchangeRate = $this->ormHelper->generateExchangeRate(
            $this->data,
            $currency,
            'EUR',
            $metadata
        );

        $this->assertEquals(1, $exchangeRate->getRate());
        $this->assertEquals($currency, $exchangeRate->getCurrency());
        $this->assertEquals($metadata, $exchangeRate->getMetadata());
    }
}